#include<stdio.h>
#include<Windows.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
#include<graphics.h>
#define n 11
void menu();//菜单 
void printmap();//打印地图
void suijishu();//生成随机数
void Dijkstra(int v,int z);//寻找最短路径
void loadResource();//加载图片
void kaishi();//选择是否开始游戏
void find();//鼠标获取公主地址
void run(int lujing[11]);	//勇者移动
MOUSEMSG GetMouseMsg();//获取鼠标信息

int yz;	//勇者开始的地点
int q;	//公主所在节点
int z;	//终点顶点名称

int a[100][100]={
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,2,2,2,2,0,0,1,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,0,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,2,2,2,2,2,2,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8,-8,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,-8,-8,-8,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,-8,-8,-8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-2,-2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,-3,-3,-3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-2,-2,-2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,-7,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,-3,-3,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-2,-2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,-7,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,-3,-3,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,-7,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,6,6,6,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,6,6,6,6,6,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,6,6,6,6,6,6,6,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,6,6,6,6,6,6,6,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6,6,6,6,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,5,5,5,5,5,5,5,5,5,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,6,6,6,6,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,3,3,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,3,3,3,3,3,3,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,3,3,3,3,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9,-9,-9,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,3,3,0,0,0,0,0,0,0,4,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9,-9,-9,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,4,4,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9,-9,-9,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,4,4,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,4,4,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,4,4,4,4,4,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,4,4,4,4,4,4,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,4,4,4,4,4,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,4,4,4,4,4,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,4,4,4,4,4,4,4,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,4,4,4,4,4,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,4,4,4,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5,-5,-5,0,0,4,4,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,-4,-4,-4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-5,-5,-5,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,-4,-4,-4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5,-5,-5,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,-4,-4,-4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,7,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,7,7,7,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,7,7,7,7,7,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,7,7,7,7,7,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,7,7,7,7,7,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-11,-11,-11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,7,7,7,7,7,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-11,-11,-11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,7,7,7,7,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-11,-11,-11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,7,7,7,7,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,7,7,7,7,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,7,7,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,7,7,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10,-10,-10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10,-10,-10,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,-6,-6,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10,-10,-10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-6,-6,-6,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,-6,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}; //地图矩阵 



int b[11][11]={
10000,28,10000,10000,10000,10000,28,10000,10000,10000,10000,
28,10000,14,10000,48,76,10000,10000,10000,10000,10000,
10000,14,10000,31,10000,10000,10000,10000,10000,10000,10000,
10000,10000,31,10000,14,10000,10000,10000,10000,10000,10000,
10000,48,10000,14,10000,38,10000,10000,10000,10000,10000,
10000,76,10000,10000,38,10000,10000,10000,10000,10000,17,
28,10000,10000,10000,10000,10000,10000,10000,10000,10000,70,
10000,10000,10000,10000,10000,10000,10000,10000,31,74,10000,
10000,10000,10000,10000,10000,10000,10000,31,10000,33,39,
10000,10000,10000,10000,10000,10000,10000,74,33,10000,10000,
10000,10000,10000,10000,10000,17,70,10000,39,10000,10000};	//邻接矩阵 


int lujing[11]={0};	//存储v到z之间的顶点名称

//加载图片资源
IMAGE D0 ;
IMAGE D1 ;
IMAGE D2 ;
IMAGE D3 ;
IMAGE D4 ;
IMAGE D5 ;
IMAGE D6 ;
IMAGE D7 ;
IMAGE D8 ;
IMAGE DD ;
IMAGE YZ ;
IMAGE GZ ;

void loadResource()
{
	loadimage(&D0,"0-山脉.jpg");
	loadimage(&D1,"1-道路.jpg");
	loadimage(&D2,"2-湖泊.jpg");
	loadimage(&D3,"3-草地.jpg");
	loadimage(&D4,"4-亡灵军队.jpg");
	loadimage(&D5,"5-史莱姆军队.jpg");
	loadimage(&D6,"6-人形军队.jpg");
	loadimage(&D7,"7-极寒之地.jpg");
	loadimage(&D8,"8-柯治鹏庄园.jpg");
	loadimage(&YZ,"9-勇者.jpg");
	loadimage(&GZ,"10-公主.jpg");
	loadimage(&DD,"终点.jpg");
}


void menu()	//菜单 												//建议使用鼠标点击 
{
	settextstyle(40, 0, _T("宋体"));
    settextcolor(RGB(47,100,200));
    outtextxy(330,30,"勇者找公主游戏");

	setlinestyle(PS_SOLID | PS_JOIN_BEVEL, 2);//框线加粗
	setcolor(BLUE);//设置框线颜色
	line(0,120,1000,120);

	settextstyle(20, 0, _T("宋体"));
	outtextxy(20,140,"游戏规定：");
	outtextxy(40,180,"初始出现一个勇者（红色笑脸）和三个公主（绿色方块），在规定时间内，玩家通过鼠标点击选择公主的");
	outtextxy(20,220,"位置，勇者会自动选择最短路径去解救指定公主。当地图中的公主数量越少时，玩家可以得到更多的积分");
	outtextxy(20,260,"（走一步之后剩两个得一分，剩一个得两分，没有公主时得三分）；当走一步后，公主数量多于三个时，");
	outtextxy(20,300,"玩家会被扣掉一分。每走一步后都会随机生成一个公主，当游戏结束时显示玩家所得分数。");
	outtextxy(20,700,"制作人：柯治鹏 闫晓璐");

	settextstyle(43, 0, _T("宋体"));
	line(450,480,650,480);line(450,480,450,550);
	line(450,550,650,550);line(650,480,650,550);
	outtextxy(470,485,"开始游戏");
	line(450,590,650,590);line(450,590,450,650);
	line(450,650,650,650);line(650,590,650,650);
	outtextxy(470,595,"结束游戏");


	
 } 

void printmap()	//打印地图 						使用for循环 
{
	int i,j;
	int x,y;
	for(i=0;i<100;i++)
		for(j=0;j<100;j++)
		{
			x=10*i;
			y=10*j;
			switch(a[j][i])
			{
				case 0 :
					putimage(x,y,&D0);
					break;
				case 1 :
					putimage(x,y,&D1);
					break;
				case 2 :
					putimage(x,y,&D2);
					break;
				case 3 :
					putimage(x,y,&D3);
					break;
				case 4 :
					putimage(x,y,&D4);
					break;
				case 5 :
					putimage(x,y,&D5);
					break;
				case 6 :
					putimage(x,y,&D6);
					break;
				case 7 :
					putimage(x,y,&D7);
					break;
				case 8 :
					putimage(x,y,&D8);
					break;
				case 9 :
					putimage(x,y,&YZ);
					break;
				case 10 :
					putimage(x,y,&GZ);
					break;
				case -1 :
					putimage(x,y,&DD);
				case -2 :
					putimage(x,y,&DD);
				case -3 :
					putimage(x,y,&DD);
				case -4 :
					putimage(x,y,&DD);
				case -5 :
					putimage(x,y,&DD);
				case -6 :
					putimage(x,y,&DD);
				case -7 :
					putimage(x,y,&DD);
				case -8 :
					putimage(x,y,&DD);
				case -9 :
					putimage(x,y,&DD);
				case -10 :
					putimage(x,y,&DD);
				case -11 :
					putimage(x,y,&DD);
					break;
			}
		}
	
} 

void suijishu()  //随机数生成勇者与公主坐标 
{
	srand(time(NULL));//生成随机种子
	int x,l,m,o;
	while(1)
	{
		x=-1-(int)rand()%11;
		l=-1-(int)rand()%11;
		m=-1-(int)rand()%11;
		o=-1-(int)rand()%11;
		if((l!=x)&&(m!=x)&&(o!=x)&&(l!=m)&&(m!=o)&&(o!=l))
			break;
	}
	yz=0-x;
	switch(x)
	{
		case -1:a[7][43]=9;break;
		case -2:a[17][27]=9;break;
		case -3:a[18][10]=9;break;	
		case -4:a[53][10]=9;break;	
		case -5:a[52][27]=9;break;
		case -6:a[73][48]=9;break;
		case -7:a[18][63]=9;break;
		case -8:a[11][84]=9;break;
		case -9:a[40][78]=9;break;
		case -10:a[71][84]=9;break;
		case -11:a[65][61]=9;break;
	}
	switch(l)
	{
		case -1:a[7][43]=10;break;
		case -2:a[17][27]=10;break;
		case -3:a[18][10]=10;break;	
		case -4:a[53][10]=10;break;	
		case -5:a[52][27]=10;break;
		case -6:a[73][48]=10;break;
		case -7:a[18][63]=10;break;
		case -8:a[11][84]=10;break;
		case -9:a[40][78]=10;break;
		case -10:a[71][84]=10;break;
		case -11:a[65][61]=10;break;
	}

	switch(m)
	{
		case -1:a[7][43]=10;break;
		case -2:a[17][27]=10;break;
		case -3:a[18][10]=10;break;	
		case -4:a[53][10]=10;break;	
		case -5:a[52][27]=10;break;
		case -6:a[73][48]=10;break;
		case -7:a[18][63]=10;break;
		case -8:a[11][84]=10;break;
		case -9:a[40][78]=10;break;
		case -10:a[71][84]=10;break;
		case -11:a[65][61]=10;break;
	}

	switch(o)
	{
		case -1:a[7][43]=10;break;
		case -2:a[17][27]=10;break;
		case -3:a[18][10]=10;break;	
		case -4:a[53][10]=10;break;	
		case -5:a[52][27]=10;break;
		case -6:a[73][48]=10;break;
		case -7:a[18][63]=10;break;
		case -8:a[11][84]=10;break;
		case -9:a[40][78]=10;break;
		case -10:a[71][84]=10;break;
		case -11:a[65][61]=10;break;
	}
	printmap();
}

void sjgz()  //随机数生成公主坐标 
{
	srand(time(NULL));//生成随机种子
	int x;
	while(1)
	{
		x=-1-(int)rand()%11;		
		if(x!=yz)
			break;
	}
	switch(x)
	{
		case -1:a[7][43]=10;break;
		case -2:a[17][27]=10;break;
		case -3:a[18][10]=10;break;	
		case -4:a[53][10]=10;break;	
		case -5:a[52][27]=10;break;
		case -6:a[73][48]=10;break;
		case -7:a[18][63]=10;break;
		case -8:a[11][84]=10;break;
		case -9:a[40][78]=10;break;
		case -10:a[71][84]=10;break;
		case -11:a[65][61]=10;break;
	}

	printmap();
}

void Dijkstra(int v,int z)
{
	int dist[11];                      //存储最短路径的长度值
	int pre[11];                       //存储一个顶点在其最短路径的前趋
	int S[11];							//标志数组，若为已经找到最短路径的结点则为1,否则为0
	int q[11];                         //存储逆序路径 
	int i,j,k;
	int m=0,l=0; 
	for( i=0;i<n;i++)
	{
		dist[i]=b[v-1][i];        //初始化
		S[i]=0;                    //标志位初始为0
		if(dist[i]<10000)
			pre[i]=v-1;              //若存在边，则前趋为原点
		else
			pre[i]=-1;             //否则，前趋为-1,不可达
	}
	S[v-1]=1;                        //原点标志为1    
	for(i=0;i<n-1;i++)
	{        //循环n-1次
		int u;                     //u为待选顶点
		int min=10000;         
		for(j=0;j<n;j++)
		{
			if((!S[j])&&dist[j]<min)
			{ //寻找距离S最小的顶点u
				min=dist[j];
				u=j;
			}
		}
		S[u]=1;                    //将其标志设置为1
		for( k=0;k<n;k++)
		{      //调整未加入S的点的的距离值
			if((!S[k])&&dist[k]>dist[u]+b[u][k])
			{
				dist[k]=dist[u]+b[u][k];
				pre[k]=u;          //若通过u减小了k的距离，则修改k的前趋为u
			}
		}
	}
	//printf("\nThe result:\n");     //输出结果
	for( i=0;i<n;i++)
	{
		if(i==z-1)
		{
			//printf("<%d,%d>:  ",v,z);
			int p=pre[i];  
			if(p!=-1)
			{                 //若可达输出最短路径
				//printf("%d  ",dist[i]);    //输出最短距离
				//printf("%d",z);      //根据前趋逆向输出最短路径
				q[m++]=z;
				while(p!=v-1)
				{
					q[m++]=p+1;
					//printf("<--%d",p+1);
					p=pre[p];
				}
				q[m]=v;
				//printf("<--%d",v);
			}
			/*else
			{                      //若不可达则输出“inf”
				printf("inf");
			}
			printf("\n");*/
		}
		
	}
	while(m>=0)
	{
		lujing[l++]=q[m];
		m--;
	}
}

void kaishi()	//选择是否开始游戏
{
	menu();
	int i,j;
	while(1)
	{
		MOUSEMSG m ;
		m = GetMouseMsg();
		switch(m.uMsg)
		{
			case WM_LBUTTONDBLCLK:
				i=m.x;
				j=m.y;
		}	
		//开始游戏
		if(i>=450&&i<=650&&j>=480&&j<=550)
		{
			suijishu();
		//	printmap();
			break;
		}
		//结束游戏
		if(i>=450&&i<=650&&j>=590&&j<=650)
		{
			exit(0);
			break;
		}
	}
}

void find()	//寻找终点
{
	int i=0,j=0;
	while(1)
	{
		MOUSEMSG m ;
		m = GetMouseMsg();
		switch(m.uMsg)
		{
			case WM_LBUTTONDBLCLK:
				j=m.x;
				i=m.y;
		}
		i/=10;
		j/=10;
		/*if(a[i][j]<0)
		{
			a[i][j]=9;
			printmap();
		}*/
		if(a[i][j]<0)
		{
			z=0-a[i][j];			//终点的位置顶点
			break;
		}
	}
	//return x;
}

void run(int lujing[11])
{
	int i=0;
	int j=0;
	int k=0;
	int u=0;
	int jojo[28]={0};
	for(i=0;i<12;i++)
		{
			if(lujing[i]!=0)
			{
				k=i;
			}
		}
	i=0;//加的
	while(i<k)	//标明每一条路径编号
	{
		if(lujing[i]==lujing[i+1])
			jojo[i]=0;
		else if(lujing[i]==1&&lujing[i+1]==2)
			jojo[i]=1;
		else if(lujing[i]==2&&lujing[i+1]==1)
			jojo[i]=2;
		else if(lujing[i]==2&&lujing[i+1]==3)
			jojo[i]=3;
		else if(lujing[i]==3&&lujing[i+1]==2)
			jojo[i]=4;
		else if(lujing[i]==3&&lujing[i+1]==4)
			jojo[i]=5;
		else if(lujing[i]==4&&lujing[i+1]==3)
			jojo[i]=6;
		else if(lujing[i]==4&&lujing[i+1]==5)
			jojo[i]=7;
		else if(lujing[i]==5&&lujing[i+1]==4)
			jojo[i]=8;
		else if(lujing[i]==5&&lujing[i+1]==2)
			jojo[i]=9;
		else if(lujing[i]==2&&lujing[i+1]==5)
			jojo[i]=10;
		else if(lujing[i]==5&&lujing[i+1]==6)
			jojo[i]=11;
		else if(lujing[i]==6&&lujing[i+1]==5)
			jojo[i]=12;
		else if(lujing[i]==2&&lujing[i+1]==6)
			jojo[i]=13;
		else if(lujing[i]==6&&lujing[i+1]==2)
			jojo[i]=14;
		else if(lujing[i]==1&&lujing[i+1]==7)
			jojo[i]=15;
		else if(lujing[i]==7&&lujing[i+1]==1)
			jojo[i]=16;
		else if(lujing[i]==6&&lujing[i+1]==11)
			jojo[i]=17;
		else if(lujing[i]==11&&lujing[i+1]==6)
			jojo[i]=18;
		else if(lujing[i]==7&&lujing[i+1]==11)
			jojo[i]=19;
		else if(lujing[i]==11&&lujing[i+1]==7)
			jojo[i]=20;
		else if(lujing[i]==11&&lujing[i+1]==9)
			jojo[i]=21;
		else if(lujing[i]==9&&lujing[i+1]==11)
			jojo[i]=22;
		else if(lujing[i]==9&&lujing[i+1]==8)
			jojo[i]=23;
		else if(lujing[i]==8&&lujing[i+1]==9)
			jojo[i]=24;
		else if(lujing[i]==8&&lujing[i+1]==10)
			jojo[i]=25;
		else if(lujing[i]==10&&lujing[i+1]==8)
			jojo[i]=26;
		else if(lujing[i]==9&&lujing[i+1]==10)
			jojo[i]=27;
		else if(lujing[i]==10&&lujing[i+1]==9)
			jojo[i]=28;
		i++;//加的
	}
	for(i=0;i<k;i++)
	{
		switch(jojo[i])
		{
			case 0:
				{
					switch(lujing[i])
					{
						case 1:a[7][43]=9;break;
						case 2:a[17][27]=9;break;
						case 3:a[18][10]=9;break;	
						case 4:a[53][10]=9;break;	
						case 5:a[52][27]=9;break;
						case 6:a[73][48]=9;break;
						case 7:a[18][63]=9;break;
						case 8:a[11][84]=9;break;
						case 9:a[40][78]=9;break;
						case 10:a[71][84]=9;break;
						case 11:a[65][61]=9;break;
					}
					break;
				}

			case 1:
				for(j=43;j>=42;j--)
				{
					a[7][j]=9;
					printmap();
					Sleep(1);
					a[7][j-1]=9;
					a[7][j]=-1;
					printmap();Sleep(1);system("cls");
				}	
				for(j=41;j>=37;j--)
				{
					a[7][j]=9;
					printmap();
					Sleep(1);
					a[7][j-1]=9;
					a[7][j]=1;
					
					printmap();Sleep(1);system("cls");
				}	
				for(j=7;j>=5;j--)
				{
					a[j][36]=9;
					printmap();
					Sleep(1);
					a[j-1][36]=9;
					a[j][36]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=36;j>=28;j--)
				{
					a[4][j]=9;
					printmap();
					Sleep(1);
					a[4][j-1]=9;
					a[4][j]=1;
				
					printmap();Sleep(1);system("cls");
				}
				for(j=4;j<=14;j++)
				{
					a[j][27]=9;
					printmap();
					Sleep(1);
					a[j+1][27]=9;
					a[j][27]=1;
		
					printmap();Sleep(1);system("cls");
				}
				a[15][27]=1;
				a[16][27]=9;
				printmap();
				Sleep(1);
				system("cls");
				a[17][27]=9;
				a[16][27]=-2;
				printmap();Sleep(1);system("cls");
				break;
			case 2:
				for(j=17;j>=16;j--)
				{
					a[j][27]=9;
					printmap();
					Sleep(1);
					a[j-1][27]=9;
					a[j][27]=-2;
					printmap();Sleep(1);system("cls");
				}
				for(j=15;j>=5;j--)
				{
					a[j][27]=9;
					printmap();
					Sleep(1);
					a[j-1][27]=9;
					a[j][27]=1;
				
					printmap();Sleep(1);system("cls");

				}
				for(j=27;j<=35;j++)
				{
					a[4][j]=9;
					printmap();
					Sleep(1);
					a[4][j+1]=9;
					a[4][j]=1;
																				
					printmap();Sleep(1);system("cls");

				}
				for(j=4;j<=6;j++)
				{
					a[j][36]=9;
					printmap();
					Sleep(1);
					a[j+1][36]=9;
					a[j][36]=1;
					printmap();Sleep(1);system("cls");
				}
				for(j=37;j<=40;j++)
				{	a[7][36]=1;
					Sleep(1);
					a[7][j]=9;
					printmap();
					Sleep(1);
					a[7][j+1]=9;
					a[7][j]=1;
					printmap();Sleep(1);system("cls");
				}
					a[7][41]=1;
					a[7][42]=9;
					printmap();
					Sleep(1);system("cls");
					a[7][43]=9;
					a[7][42]=-2;
					printmap();Sleep(1);system("cls");
				
				break;
			case 3:
					for(j=27;j>=26;j--)
				{
					a[17][j]=9;
					printmap();
					Sleep(1);
					a[17][j-1]=9;
					a[17][j]=-2;
				
					printmap();Sleep(1);system("cls");
				}
					for(j=25;j>=12;j--)
				{
					a[17][j]=9;
					printmap();
					Sleep(1);
					a[17][j-1]=9;
					a[17][j]=1;
				
					printmap();Sleep(1);system("cls");
				}

					a[17][11]=9;
					printmap();
					Sleep(1);
					a[17][10]=9;
					a[17][11]=-3;
				
					printmap();Sleep(1);system("cls");

				a[17][10]=9;
				printmap();
				Sleep(1);
				a[18][10]=9;
				a[17][10]=-3;
			
				printmap();Sleep(1);system("cls");
				break;
			case 4:
				a[18][10]=9;
				printmap();
				Sleep(1);system("cls");
				a[17][10]=9;
				a[18][10]=-3;
			
				printmap();Sleep(1);system("cls");
					a[17][10]=9;
					printmap();
					Sleep(1);system("cls");
					a[17][11]=9;
					a[17][10]=-3;
				
					printmap();Sleep(1);system("cls");

				for(j=11;j<=25;j++)
				{
					a[17][j]=9;
					printmap();
					Sleep(1);
					a[17][j+1]=9;
					a[17][j]=1;
					a[17][11]=-3;
				
					printmap();Sleep(1);system("cls");
				}
				for(j=26;j<=26;j++)
				{
					a[17][j]=9;
					printmap();
					Sleep(1);
					a[17][j+1]=9;
					a[17][j]=-2;
				
					printmap();Sleep(1);system("cls");
				}
				break;
			case 5:
				for(j=18;j<=19;j++)
				{
					a[j][10]=9;
					printmap();
					Sleep(1);
					a[j+1][10]=9;
					a[j][10]=-3;
					printmap();Sleep(1);system("cls");
				}
				for(j=20;j<=51;j++)
				{
					a[j][10]=9;
					printmap();
					Sleep(1);
					a[j+1][10]=9;
					a[j][10]=1;
					printmap();Sleep(1);system("cls");
				}
				for(j=52;j<=52;j++)
				{
					a[j][10]=9;
					printmap();
					Sleep(1);
					a[j+1][10]=9;
					a[j][10]=-4;
					printmap();Sleep(1);system("cls");
				}

				break;
			case 6:
				for(j=53;j>=52;j--)
				{
					a[j][10]=9;
					printmap();
					Sleep(1);
					a[j-1][10]=9;
					a[j][10]=-4;
				
					printmap();Sleep(1);system("cls");
				}
				for(j=51;j>=20;j--)
				{
					a[j][10]=9;
					printmap();
					Sleep(1);
					a[j-1][10]=9;
					a[j][10]=1;
				
					printmap();Sleep(1);system("cls");
				}
				for(j=19;j>=19;j--)
				{
					a[j][10]=9;
					printmap();
					Sleep(1);
					a[j-1][10]=9;
					a[j][10]=-3;
				
					printmap();Sleep(1);system("cls");
				}
				break;
			case 7:
				a[53][10]=9;
				printmap();Sleep(1);system("cls");
				
				a[52][10]=9;
				a[53][10]=-4;
				
				printmap();Sleep(1);system("cls");
				a[52][10]=9;
				printmap();
				Sleep(1);system("cls");
				a[52][11]=9;
				a[52][10]=-4;
			
				printmap();Sleep(1);system("cls");
				a[52][11]=9;
				printmap();
				Sleep(1);	system("cls");
				a[52][12]=9;
				a[52][11]=-4;
			
				printmap();Sleep(1);system("cls");
				for(j=12;j<=25;j++)
				{
					a[52][j]=9;
					printmap();
					Sleep(1);
					a[52][j+1]=9;
					a[52][j]=1;			
			
					printmap();Sleep(1);system("cls");
				}			
				a[52][26]=-5;
				
				a[52][27]=9;
	            
				printmap();Sleep(1);system("cls");
				break;
			case 8:
				a[52][27]=-5;
				
				a[52][26]=9;	            
				printmap();Sleep(1);system("cls");
				for(j=26;j>=11;j--)
				{
					a[52][26]=-5;
					a[52][j]=9;
					printmap();
					Sleep(1);
					a[52][j-1]=9;
					a[52][j]=1;
					a[52][26]=-5;
					
					printmap();Sleep(1);system("cls");
				}
				a[52][10]=9;
				printmap();Sleep(1);system("cls");
				a[53][10]=9;
				a[52][10]=1;
	
				printmap();Sleep(1);system("cls");
				break;
			case 9:
				for(j=52;j>=51;j--)
				{
					a[j][27]=9;
					printmap();
					Sleep(1);
					a[j-1][27]=9;
					a[j][27]=-5;
					printmap();Sleep(1);system("cls");
				}
				for(j=50;j>=42;j--)
				{
					a[j][27]=9;
					printmap();
					Sleep(1);
					a[j-1][27]=9;
					a[j][27]=1;
					printmap();Sleep(1);system("cls");
				}
				for(j=27;j>=20;j--)
				{
					a[41][j]=9;
					printmap();
					Sleep(1);
					a[41][j-1]=9;
					a[41][j]=1;
					printmap();Sleep(1);system("cls");
				}
				for(j=41;j>=32;j--)
				{
					a[j][19]=9;
					printmap();
					Sleep(1);
					a[j-1][19]=9;
					a[j][19]=1;
					printmap();Sleep(1);system("cls");
				}
				for(j=19;j<=26;j++)
				{
					a[31][j]=9;
					printmap();
					Sleep(1);
					a[31][j+1]=9;
					a[31][j]=1;
				
					printmap();Sleep(1);system("cls");
				}
				for(j=31;j>=19;j--)
				{
					a[j][27]=9;
					printmap();
					Sleep(1);
					a[j-1][27]=9;
					a[j][27]=1;
					printmap();Sleep(1);system("cls");
				}
				for(j=18;j>=18;j--)
				{
					a[j][27]=9;
					printmap();
					Sleep(1);
					a[j-1][27]=9;
					a[j][27]=-5;
					printmap();Sleep(1);system("cls");
				}
				break;
			case 10:
				for(j=17;j<=18;j++)
				{
					a[j][27]=9;
					printmap();
					Sleep(1);
					a[j+1][27]=9;
					a[j][27]=-2;
				
					printmap();Sleep(1);system("cls");
				}
				for(j=19;j<=30;j++)
				{
					a[j][27]=9;
					printmap();
					Sleep(1);
					a[j+1][27]=9;
					a[j][27]=1;
				
					printmap();Sleep(1);system("cls");
				}
				for(j=27;j>=20;j--)
				{
					a[31][j]=9;
					printmap();
					Sleep(1);
					a[31][j-1]=9;
					a[31][j]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=31;j<=40;j++)
				{
					a[j][19]=9;
					printmap();
					Sleep(1);
					a[j+1][19]=9;
					a[j][19]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=19;j<=26;j++)
				{
					a[41][j]=9;
					printmap();
					Sleep(1);
					a[41][j+1]=9;
					a[41][j]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=41;j<=50;j++)
				{
					a[j][27]=9;
					printmap();
					Sleep(1);
					a[j+1][27]=9;
					a[j][27]=1;
				
					printmap();Sleep(1);system("cls");
				}
				for(j=51;j<=51;j++)
				{
					a[j][27]=9;
					printmap();
					Sleep(1);
					a[j+1][27]=9;
					a[j][27]=-5;
				
					printmap();Sleep(1);system("cls");
				}
				break;
			case 11:
				a[52][27]=9;
				printmap();
				Sleep(1);system("cls");
				a[52][28]=9;
				a[52][27]=-5;
			
				printmap();Sleep(1);	system("cls");
				Sleep(1);
				a[53][28]=9;
				a[52][28]=-5;
			
				printmap();Sleep(1);	system("cls");
				a[54][28]=9;
				a[53][28]=-5;
			
				printmap();Sleep(1);	system("cls");
				for(j=54;j<=72;j++)
				{
					a[53][28]=-5;
					a[j][28]=9;
					printmap();
					Sleep(1);
					a[j+1][28]=9;
					a[j][28]=1;
			
					printmap();Sleep(1);		system("cls");
				}
				for(j=28;j<=46;j++)
				{
					a[73][j]=9;
					printmap();
					Sleep(1);
					a[73][j+1]=9;
					a[73][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=47;j<=47;j++)
				{
					a[73][j]=9;
					printmap();
					Sleep(1);
					a[73][j+1]=9;
					a[73][j]=-6;
				
					printmap();Sleep(1);system("cls");	
				}
				
				break;
			case 12:
				for(j=48;j>=47;j--)
				{
					a[73][j]=9;
					printmap();
					Sleep(1);
					a[73][j-1]=9;
					a[73][j]=-6;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=46;j>=29;j--)
				{
					a[73][j]=9;
					printmap();
					Sleep(1);
					a[73][j-1]=9;
					a[73][j]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=73;j>=54;j--)
				{
					a[j][28]=9;
					printmap();
					Sleep(1);
					a[j-1][28]=9;
					a[j][28]=1;
					
					printmap();Sleep(1);system("cls");
				}
				a[53][28]=-5;
				a[52][28]=9;
				printmap();Sleep(1);system("cls");
			
				a[52][27]=9;
				a[52][28]=-5;
				
				printmap();Sleep(1);system("cls");
				a[52][27]=9;
				a[52][28]=-5;
				printmap();Sleep(1);system("cls");
				break;
			case 13:
				a[17][27]=9;
				printmap();
				Sleep(1);system("cls");
				a[16][27]=9;
				a[17][27]=-2;
			
				printmap();Sleep(1);	system("cls");
				a[16][28]=9;
				a[16][27]=-2;
				printmap();Sleep(1);system("cls");
				a[16][29]=9;
				a[16][28]=-2;
				printmap();Sleep(1);	system("cls");
				for(j=29;j<=38;j++)
				{
					a[16][j]=9;
					printmap();
					Sleep(1);
					a[16][j+1]=9;
					a[16][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=16;j<=55;j++)
				{
					a[j][39]=9;
					printmap();
					Sleep(1);
					a[j+1][39]=9;
					a[j][39]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=39;j<=42;j++)
				{
					a[56][j]=9;
					printmap();
					Sleep(1);
					a[56][j+1]=9;
					a[56][j]=1;
					
					printmap();Sleep(1);system("cls");
				}	
				for(j=56;j<=68;j++)
				{
					a[j][43]=9;
					printmap();
					Sleep(1);
					a[j+1][43]=9;
					a[j][43]=1;
					
					printmap();Sleep(1);system("cls");
				}			
				for(j=43;j<=48;j++)
				{
					a[69][j]=9;
					printmap();
					Sleep(1);
					a[69][j+1]=9;
					a[69][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=69;j<=71;j++)
				{
					a[j][49]=9;
					printmap();
					Sleep(1);
					a[j+1][49]=9;
					a[j][49]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				a[73][49]=9;
				a[72][49]=-6;
				printmap();Sleep(1);system("cls");
				a[73][48]=9;
				a[73][49]=-6;
				printmap();Sleep(1);system("cls");

				break;
			case 14:
				a[73][49]=9;
				a[73][48]=-6;
				printmap();Sleep(1);system("cls");
				a[72][49]=9;
				a[73][49]=-6;
				
				printmap();Sleep(1);system("cls");
				a[71][49]=9;
				a[72][49]=-6;
				
				printmap();Sleep(1);system("cls");
				for(j=71;j>=70;j--)
				{
					a[j][49]=9;
					printmap();
					a[j-1][49]=9;
					a[j][49]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=49;j>=44;j--)
				{
					a[69][j]=9;
					printmap();
					Sleep(1);
					a[69][j-1]=9;
					a[69][j]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=69;j>=57;j--)
				{
					a[j][43]=9;
					printmap();
					Sleep(1);
					a[j-1][43]=9;
					a[j][43]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=43;j>=40;j--)
				{
					a[56][j]=9;
					printmap();
					Sleep(1);
					a[56][j-1]=9;
					a[56][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=56;j>=17;j--)
				{
					a[j][39]=9;
					printmap();
					Sleep(1);
					a[j-1][39]=9;
					a[j][39]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=39;j>=29;j--)
				{
					a[16][j]=9;
					printmap();
					Sleep(1);
					a[16][j-1]=9;
					a[16][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}

				a[16][27]=9;
				a[16][28]=-2;
			
				printmap();Sleep(1);	system("cls");
				a[17][27]=9;
				a[16][27]=-2;
				printmap();
				Sleep(1);system("cls");

				break;
			case 15:
				a[7][44]=9;
				a[7][43]=-2;
		
				printmap();Sleep(1);system("cls");
				a[7][45]=9;
				a[7][44]=-2;
				printmap();
				Sleep(1);system("cls");
				for(j=45;j<=62;j++)
				{
					a[7][j]=9;
					printmap();
					Sleep(1);
					a[7][j+1]=9;
					a[7][j]=1;
			
					printmap();Sleep(1);system("cls");
				}
				for(j=7;j<=15;j++)
				{
					a[j][63]=9;
					printmap();
					Sleep(1);
					a[j+1][63]=9;
					a[j][63]=1;
			
					printmap();Sleep(1);system("cls");
				}
				a[17][63]=9;
				a[16][63]=1;
			
				printmap();Sleep(1);system("cls");
				a[18][63]=9;
				a[17][63]=-7;
				printmap();
				Sleep(1);system("cls");
				break;
			case 16:
				a[17][63]=9;
				a[18][63]=-7;
			
				printmap();Sleep(1);	system("cls");
				a[16][63]=9;
				a[17][63]=-7;
				
				printmap();Sleep(1);system("cls");
				for(j=16;j>=8;j--)
				{
					a[j][63]=9;
					printmap();
					Sleep(1);
					a[j-1][63]=9;
					a[j][63]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=63;j>=45;j--)
				{
					a[7][j]=9;
					printmap();
					Sleep(1);
					a[7][j-1]=9;
					a[7][j]=1;
					;
					printmap();Sleep(1);system("cls");
				}
			
				a[7][43]=9;
				a[7][44]=-2;
		
				printmap();Sleep(1);system("cls");
	
				break;
			case 17:
			
			
			
				a[73][49]=9;
				a[73][48]=-6;
				printmap();Sleep(1);system("cls");
				a[73][50]=9;
				a[73][49]=-6;	printmap();Sleep(1);system("cls");
				for(j=50;j<=60;j++)
				{
					a[73][j]=9;
					printmap();
					Sleep(1);
					a[73][j+1]=9;
					a[73][j]=1;
				
					printmap();Sleep(1);system("cls");
				}
				for(j=73;j>=67;j--)
				{
					a[j][61]=9;
					printmap();
					Sleep(1);
					a[j-1][61]=9;
					a[j][61]=1;
				
					printmap();Sleep(1);system("cls");
				}
				a[66][61]=9;
				a[67][61]=1;
			
				printmap();Sleep(1);system("cls");
				a[65][61]=9;
				a[66][61]=-11;
				printmap();Sleep(1);system("cls");
				break;
			case 18:
				a[66][61]=9;
				a[65][61]=-11;
			
				printmap();Sleep(1);system("cls");
				a[67][61]=1;
				a[66][61]=-11;
				printmap();Sleep(1);system("cls");
				for(j=67;j<=72;j++)
				{
					a[j][61]=9;
					printmap();
					Sleep(1);
					a[j+1][61]=9;
					a[j][61]=1;
				
					printmap();Sleep(1);system("cls");
				}
				for(j=61;j>=51;j--)
				{
					a[73][j]=9;
					printmap();
					Sleep(1);
					a[73][j-1]=9;
					a[73][j]=1;
				
					printmap();Sleep(1);system("cls");
				}
				a[73][49]=9;
				a[73][50]=1;
				printmap();Sleep(1);system("cls");
				a[73][48]=9;
				a[73][49]=-6;
		    	printmap();Sleep(1);system("cls");
				break;
			case 19:
				a[19][63]=9;
				a[18][63]=-7;
				printmap();Sleep(1);system("cls");
				a[20][63]=9;
				a[19][63]=-7;
				printmap();Sleep(1);system("cls");
				for(j=20;j<=26;j++)
				{
					a[j][63]=9;
					printmap();
					Sleep(1);
					a[j+1][63]=9;
					a[j][63]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=63;j>=51;j--)
				{
					a[27][j]=9;
					printmap();
					Sleep(1);
					a[27][j-1]=9;
					a[27][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=27;j<=40;j++)
				{
					a[j][50]=9;
					printmap();
					Sleep(1);
					a[j+1][50]=9;
					a[j][50]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=50;j<=61;j++)
				{
					a[41][j]=9;
					printmap();
					Sleep(1);
					a[41][j+1]=9;
					a[41][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=41;j<=63;j++)
				{
					a[j][62]=9;
					printmap();
					Sleep(1);
					a[j+1][62]=9;
					a[j][62]=1;
				
					printmap();Sleep(1);	system("cls");
				}	
				a[65][62]=9;
				a[64][62]=-11;
				printmap();Sleep(1);system("cls");
			
				a[65][61]=9;
				a[65][62]=-11;
				printmap();Sleep(1);system("cls");
				break;
			case 20:
				a[65][62]=9;
				a[65][61]=-11;
				printmap();
				Sleep(1);system("cls");
				a[64][62]=9;
				a[65][62]=-11;
				printmap();Sleep(1);system("cls");
				a[63][62]=9;
				a[64][62]=-11;
				printmap();Sleep(1);system("cls");
			
				for(j=63;j>=42;j--)
				{
					a[j][62]=9;
					printmap();
					Sleep(1);
					a[j-1][62]=9;
					a[j][62]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=62;j>=51;j--)
				{
					a[41][j]=9;
					printmap();
					Sleep(1);
					a[41][j-1]=9;
					a[41][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=41;j>=28;j--)
				{
					a[j][50]=9;
					printmap();
					Sleep(1);
					a[j-1][50]=9;
					a[j][50]=1;
					printmap();
					Sleep(1);	system("cls");
				}
				for(j=50;j<=62;j++)
				{
					a[27][j]=9;
					printmap();
					Sleep(1);
					a[27][j+1]=9;
					a[27][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=27;j>=21;j--)
				{
					a[j][63]=9;
					printmap();
					Sleep(1);
					a[j-1][63]=9;
					a[j][63]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				a[19][63]=9;
				a[20][63]=1;
				printmap();Sleep(1);system("cls");
				a[18][63]=9;
				a[19][63]=-7;
				printmap();Sleep(1);system("cls");
				break;
			case 21:
				a[65][62]=9;
				a[65][61]=-11;
				printmap();Sleep(1);system("cls");
				a[65][63]=9;
				a[65][62]=-11;
				printmap();Sleep(1);system("cls");
				for(j=64;j<=77;j++)
				{
					a[65][j]=9;
					a[65][j-1]=1;
					printmap();
					Sleep(1);
					a[65][j+1]=9;
					a[65][j]=1;
			
					printmap();Sleep(1);system("cls");
				}
				for(j=65;j>=42;j--)
				{
					a[j][78]=9;
					printmap();
					Sleep(1);
					a[j-1][78]=9;
					a[j][78]=1;
					printmap();Sleep(1);system("cls");
				}
				a[40][78]=9;
				a[41][78]=-9;
				printmap();Sleep(1);system("cls");
			
				break;
			case 22:
				a[41][78]=9;
				a[40][78]=-9;
				printmap();Sleep(1);system("cls");
				a[42][78]=9;
				a[41][78]=-9;
				printmap();Sleep(1);system("cls");
				for(j=42;j<=64;j++)
				{
					a[j][78]=9;
					printmap();
					Sleep(1);
					a[j+1][78]=9;
					a[j][78]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=78;j>=63;j--)
				{
					a[65][j]=9;
					printmap();
					Sleep(1);
					a[65][j-1]=9;
					a[65][j]=1;
					
					printmap();Sleep(1);system("cls");
				}
				a[65][61]=9;
				a[65][62]=-11;
				printmap();Sleep(1);system("cls");
			
				break;
			case 23:
				a[39][78]=9;
				a[40][78]=-9;
				printmap();Sleep(1);system("cls");
				a[38][78]=9;
				a[39][78]=-9;
				printmap();Sleep(1);system("cls");
				for(j=38;j>=12;j--)
				{
					a[j][78]=9;
					printmap();
					Sleep(1);
					a[j-1][78]=9;
					a[j][78]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=78;j<=83;j++)
				{
					a[11][j]=9;
					printmap();
					Sleep(1);
					a[11][j+1]=9;
					a[11][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				a[11][84]=9;
				a[11][83]=-8;
				printmap();Sleep(1);system("cls");
			
				break;
			case 24:
				a[11][83]=9;
				a[11][84]=-8;
				printmap();Sleep(1);system("cls");
				a[11][82]=9;
				a[11][83]=-8;
				printmap();Sleep(1);system("cls");
					
				for(j=82;j>=79;j--)
				{
					a[11][j]=9;
					printmap();
					Sleep(1);
					a[11][j-1]=9;
					a[11][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=11;j<=37;j++)
				{
					a[j][78]=9;
					printmap();
					Sleep(1);
					a[j+1][78]=9;
					a[j][78]=1;
					
					printmap();Sleep(1);system("cls");
				}
				a[39][78]=9;
				a[38][78]=1;
				printmap();Sleep(1);system("cls");
				a[40][78]=9;
				a[39][78]=-9;
				printmap();Sleep(1);system("cls");
			
				break;
			case 25:
				a[11][85]=9;
				a[11][84]=-8;
				printmap();Sleep(1);system("cls");
				a[11][86]=9;
				a[11][85]=-8;
				printmap();Sleep(1);system("cls");
				for(j=86;j<=92;j++)
				{
					a[11][j]=9;
					printmap();
					Sleep(1);
					a[11][j+1]=9;
					a[11][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=11;j<=70;j++)
				{
					a[j][93]=9;
					printmap();
					Sleep(1);
					a[j+1][93]=9;
					a[j][93]=1;
					
					printmap();Sleep(1);system("cls");
				}
				for(j=93;j>=86;j--)
				{
					a[71][j]=9;
					printmap();
					Sleep(1);
					a[71][j-1]=9;
					a[71][j]=1;
					
					printmap();Sleep(1);system("cls");
				}
				a[71][84]=9;
				a[71][85]=-10;
				printmap();Sleep(1);system("cls");
				break;
			case 26:
				a[71][85]=9;
				a[71][84]=-10;
				printmap();Sleep(1);system("cls");
				a[71][86]=9;
				a[71][85]=-10;
				printmap();Sleep(1);system("cls");
				for(j=86;j<=92;j++)
				{
					a[71][j]=9;
					printmap();
					Sleep(1);
					a[71][j+1]=9;
					a[71][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=71;j>=12;j--)
				{
					a[j][93]=9;
					printmap();
					Sleep(1);
					a[j-1][93]=9;
					a[j][93]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=93;j<=86;j--)
				{
					a[11][j]=9;
					printmap();
					Sleep(1);
					a[11][j-1]=9;
					a[11][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				for(j=93;j>=86;j--)
				{
					a[11][j]=9;
					printmap();
					Sleep(1);
					a[11][j-1]=9;
					a[11][j]=1;
				
					printmap();Sleep(1);	system("cls");
				}
				a[11][84]=9;
				a[11][85]=-8;
				printmap();Sleep(1);system("cls");
				break;
			case 27:
				a[40][78]=9;
				a[40][77]=-9;
				printmap();Sleep(1);system("cls");
				a[40][79]=9;
				a[40][78]=-9;
				printmap();Sleep(1);system("cls");
				for(j=79;j<=83;j++)
				{
				
					a[40][j]=9;
					printmap();
					Sleep(1);	
					a[40][j+1]=9;
					a[40][j]=1;	
					a[40][79]=-9;
			
					printmap();Sleep(1);system("cls");
				}
				for(j=40;j<=69;j++)
				{
					a[j][84]=9;
					printmap();
					Sleep(1);
					a[j+1][84]=9;
					a[j][84]=1;
				
					printmap();Sleep(1);system("cls");
				}
				a[71][84]=9;
				a[70][84]=-10;
				printmap();Sleep(1);system("cls");
			
				break;
			case 28:
				a[71][84]=9;
				a[72][84]=-10;
				printmap();Sleep(1);system("cls");
				a[70][84]=9;
				a[71][84]=-10;
				printmap();Sleep(1);system("cls");
				for(j=70;j>=41;j--)
				{
					a[j][84]=9;
					printmap();
					Sleep(1);
					a[j-1][84]=9;
					a[j][84]=1;
					a[70][84]=-10;
			
					printmap();Sleep(1);system("cls");
				}
				for(j=84;j>=80;j--)
				{
					a[40][j]=9;
					printmap();
					Sleep(1);
					a[40][j-1]=9;
					a[40][j]=1;			
					printmap();Sleep(1);system("cls");
				}
				a[40][78]=9;
				a[40][79]=-9;
				printmap();Sleep(1);system("cls");
			
				break;
		}

	}
	yz=lujing[k];	//?
}
void main()
{
	clock_t start,finish;
	double totaltime;
	double time=0 ;//时间
	char c[10]={0},s[10]={0};
	int r,count=0;
	initgraph(1000,1000);	//界面大小 
	setbkcolor(WHITE);	//设置背景颜色
	cleardevice();	//清屏
	loadResource();//加载图片资源
	kaishi();
	settextstyle(30, 0, _T("宋体"));
	settextcolor(RGB(47,100,200));
	outtextxy(0,0,"all time：120");
	outtextxy(0,30,"now time：");
	gcvt(time,sizeof(time)+1,c);      
	outtextxy(150, 30, c);
	outtextxy(0,60,"get point：");
	itoa((int)count,s,10);
	outtextxy(160, 60, s);
	while(time<120)
	{	
		r=0;
		settextstyle(30, 0, _T("宋体"));
		settextcolor(RGB(47,100,200));
		outtextxy(0,0,"all time：120");
		outtextxy(0,30,"now time：");
		gcvt(time,sizeof(time)+1,c);//将float转化成字符串
		outtextxy(150, 30, c);
		outtextxy(0,60,"get point：");
		itoa((int)count,s,10);		//将int转化成字符串
		outtextxy(160, 60, s);
		start=clock();
		find();//鼠标信息获取
		Dijkstra(yz,z);//最短路径
		run(lujing);
		finish=clock();
		totaltime=(double)(finish-start)/CLOCKS_PER_SEC;
		time+=totaltime;
		for(int w=0;w<100;w++)
			for(int e=0;e<100;e++)
			{
				if(a[w][e]==10)
				{
					r++;
				}
			}
		if(r>3)
			count--;
		if(r==2)
			count++;
		if(r==1)
			count+=2;
		if(r==0)
			count+=3;
		sjgz();
		for(int m=0;m<11;m++)
			lujing[m]=0;
	}
	settextstyle(40, 0, _T("宋体"));
	settextcolor(RGB(47,100,200));
	outtextxy(0,0,"you get point：");
	itoa((int)count,s,10);
	outtextxy(100, 60, s);
	_getch();
	closegraph();
}


//2号点显色，红色会变成绿色，5号点